# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-10-04 09:59
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations
from accounts.models import CircusUser

from shared.group_permissions import CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP


def forwards_func(apps, schema_editor):
    # Fetching all Accounts
    accounts = apps.get_model("people", "account").objects.filter(account_type__code=settings.CLIENT_USER_TYPE).order_by('id')

    for account in accounts:
        # Referencing the model directly to use the model methods.
        client_users = CircusUser.objects.filter(account_id=account.id).order_by('id')
        loop_count = 0
        for user in client_users:
            # To make the first user of the organization as 'Organization administrator' and organization as top_organization.
            if user.account.parent is None and loop_count == 0:
                group = apps.get_model("auth", "group").objects.get(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP)
                user.add_to_group(group.name)

            loop_count += 1
            # Knowing what groups are assigned to user already
            user_groups = user.groups.all()
            for group in user_groups:
                # Getting the permisions of the Group.
                permissions = group.permissions.all()
                for prm in permissions:
                    user.add_user_permission(permission=prm)


def reverse_func(apps, schema_editor):
    # forwards_func() assigns Groups and permission to existing legacy users.
    # so reverse_func() should delete all assigned groups and permissions.
    accounts = apps.get_model("people", "account").objects.filter(account_type__code=settings.CLIENT_USER_TYPE).order_by('id')

    for account in accounts:
        client_users = CircusUser.objects.filter(account_id=account.id).order_by('id')
        loop_count = 0
        for user in client_users:
            # Knowing what groups are assigned to user already
            user_groups = user.groups.all()
            for group in user_groups:
                # Getting the permisions of the Group.
                permissions = group.permissions.all()
                for prm in permissions:
                    user.remove_user_permission(permission=prm)

            if user.account.parent is None and loop_count == 0:
                group = apps.get_model("auth", "group").objects.get(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP)
                user.remove_from_group(group.name)

            loop_count += 1


class Migration(migrations.Migration):

    dependencies = [
        ('clients', '0008_renaming_existing_client_groups'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
