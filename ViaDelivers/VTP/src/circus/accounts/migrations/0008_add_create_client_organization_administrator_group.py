# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-08 07:03
from __future__ import unicode_literals

from django.db import migrations
from django.core.exceptions import ObjectDoesNotExist
from shared.group_permissions import CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP
from django.conf import settings


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    try:
        auth_group = apps.get_model("auth", "Group").objects.get(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP)
    except ObjectDoesNotExist:
        try:
            auth_group = apps.get_model("auth", "Group").objects.create(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP)
        except:
            pass

        auth_group.save


def reverse_func(apps, schema_editor):
    # forwards_func() creates two Country instances,
    # so reverse_func() should delete them.
    clients = apps.get_model("accounts", "CircusUser").objects.filter(user_type=settings.CLIENT_USER_TYPE)
    for client in clients:
        client.groups.remove(apps.get_model("auth", "Group").objects.get(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP))

    auth_group = apps.get_model("auth", "Group").objects.get(name=CLIENT_ORGANIZATION_ADMINISTRATOR_GROUP)
    if auth_group:
        auth_group.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0007_client_notification_group_data'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
